J : set
K : set
J₀ J₁ K₀ K₁ : set
M₀ M₁ M₂ M₃ : set

B `J `K₀ `K₁
∵
SaveAs (B `J `K₀ `K₁) "loop"

Slice 🄰 (⟨`J₀, `J₁⟩ ⟨`M₂, `M₃⟩)
Let "/" (slasher 🄰) 🄰 ψ
Let "/" (slasher 🄰) 🄰 ψ
Let "/" (slasher 🄰) 🄰 ψ

⟨Slice 🄵 ψ (⟨`J₀×?, `J₁×M₀, `J₁×M₁⟩) min,
 Slice 🄸 ψ (⟨`J₀×?, `J₁×M₀, `J₁×M₁⟩) min,
 Slice 🄻 ψ (⟨`?⟩ ⟨`M₀, `M₁⟩) min,
 Slice 🄾 ψ (⟨`?⟩ ⟨`M₀, `M₁⟩) min,
 Slice (findAll (q ↦ ?)) ⟨`M₀, `M₁⟩⟩

Distrib min
Assoc min

⟨Let min (slasher 🄰) ⟨🄴,🄵⟩ ψ,
 Let min (slasher 🄱) ⟨🄺,🄻⟩ ψ⟩

⟨Let min (slasher 🄰) ⟨🄶,🄷,🄹⟩ ψ,
 Let min (slasher 🄲) ⟨🄽,🄾,🅀⟩ ψ,
 Let min (slasher 🄴) ⟨🅄,🅅,🅇⟩ ψ,
 Let min (slasher 🄵) ⟨🅉,🄰̲,🄲̲⟩ ψ⟩

🄰 🄱 🄳 🄴 🄶 🄷 🄸 🄹 ↦ SynthAuto . ... ψ
/*
⟨Synth 🄰 (B `J₁ `M₁ `M₃) ψ,
 Synth 🄱 (B `J₁ `M₀ `M₃) ψ,
 Synth 🄳 (B `J₁ `M₁ `M₂) ψ,
 Synth 🄴 (B `J₁ `M₀ `M₂) ψ,
 Synth 🄶 (B `J₀ `M₁ `M₃) ψ,
 Synth 🄷 (B `J₀ `M₀ `M₃) ψ,
 Synth 🄸 (B `J₀ `M₁ `M₂) ψ,
 Synth 🄹 (B `J₀ `M₀ `M₂) ψ⟩*/
Opt

SaveAs (B `J `K₀ `K₁) "rec"