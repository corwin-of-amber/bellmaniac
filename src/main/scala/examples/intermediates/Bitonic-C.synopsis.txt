R : set
J : set
J₀ J₁ : set
K₀ K₁ K₂ K₃ : set

C `J₀ `J₁
∵
SaveAs (C `J₀ `J₁) "loop"

Slice (find (i ↦ ?)) ⟨`K₂×K₂, `K₂×K₃, `K₃×K₃⟩

Let "/" (slasher 🄰) 🄰 ψ
Let "/" (slasher 🄰) 🄰 ψ

⟨Slice 🄴 (find 🄴 ψ) ⟨`K₀, `K₁⟩ min,
 Slice 🄶 (find 🄶 ψ) ⟨`K₀, `K₁⟩ min,
 Slice 🄸 (find 🄸 ψ) ⟨`K₀, `K₁⟩ min⟩
Assoc min

⟨Let min (slasher 🄰) ⟨🄳,🄴⟩ ψ, Let min (slasher 🄱) ⟨🄶,🄷⟩ ψ, 
 Let min (slasher 🄲) ⟨🄹,🄺⟩ ψ⟩
🄰 🄱 🄴 🄵 ↦ SynthAuto . ... ψ
/*
⟨Synth 🄰 (C `K₁ `K₃) ψ, Synth 🄱 (C `K₀ `K₃) ψ, 
 Synth 🄴 (C `K₁ `K₂) ψ, Synth 🄵 (C `K₀ `K₂) ψ⟩
*/
Opt

SaveAs (C `J₀ `J₁) "rec"