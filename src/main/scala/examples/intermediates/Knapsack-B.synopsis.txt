I : set
J : set
I₀ I₁ J₀ J₁ : set
K₀ K₁ K₂ K₃ : set

B `I `J₀ `J₁
∵
SaveAs (B `I `J₀ `J₁) "loop"

Slice (find (i ↦ ?)) (⟨`I₀, `I₁⟩ ⟨`K₂, `K₃⟩)
Let "/" (slasher 🄰) 🄰 (ctx 🄰 ψ)
Let "/" (slasher 🄰) 🄰 (ctx 🄰 ψ)
Let "/" (slasher 🄰) 🄰 (ctx 🄰 ψ)

⟨Slice (find 🄵 ψ) ⟨`I₀×?, `I₁×K₀, `I₁×K₁⟩,
 Slice (find 🄷 ψ) ⟨`I₀×?, `I₁×K₀, `I₁×K₁⟩,
 Slice (find 🄹 ψ) (`? ⟨`K₀, `K₁⟩),
 Slice (find 🄻 ψ) (`? ⟨`K₀, `K₁⟩)⟩ in ⟨🄵,🄷,🄹,🄻⟩
⟨Distrib "/" 🄵 (find 🄵 (ψ / ?)), Distrib "/" 🄷 (find 🄷 (ψ / ?)),
 Distrib "/" 🄹 (find 🄹 (ψ / ?)), Distrib "/" 🄻 (find 🄻 (ψ / ?))⟩
⟨SlashToReduce max ⟨🄵,🄶,🄷⟩, SlashToReduce max ⟨🄹,🄺,🄻⟩,
 SlashToReduce max ⟨🄽,🄾⟩,    SlashToReduce max ⟨🅀,🅁⟩⟩
Assoc max
⟨Let max (slasher 🄰) ⟨🄴,🄵⟩ (ctx 🄰 ψ), Let max (slasher 🄱) ⟨🄸,🄹⟩ (ctx 🄱 ψ),
 Let max (slasher 🄲) ⟨🄼,🄽⟩ (ctx 🄲 ψ), Let max (slasher 🄳) ⟨🄿,🅀⟩ (ctx 🄳 ψ)⟩
⟨Let max (slasher 🄰) ⟨🄸,🄹⟩ (ctx 🄰 ψ), Let max (slasher 🄲) ⟨🄽,🄾⟩ (ctx 🄲 ψ)⟩

🄰 🄱 🄳 🄴 🄶 🄷 🄸 🄹 ↦ SynthAuto . ... ψ
/*
⟨Synth 🄰 (B `I₁ `K₁ `K₃) (ctx 🄰 ψ), Synth 🄱 (B `I₁ `K₀ `K₃) (ctx 🄱 ψ),
 Synth 🄳 (B `I₁ `K₁ `K₂) (ctx 🄳 ψ), Synth 🄴 (B `I₁ `K₀ `K₂) (ctx 🄴 ψ),
 Synth 🄶 (B `I₀ `K₁ `K₃) (ctx 🄶 ψ), Synth 🄷 (B `I₀ `K₀ `K₃) (ctx 🄷 ψ),
 Synth 🄸 (B `I₀ `K₁ `K₂) (ctx 🄸 ψ), Synth 🄹 (B `I₀ `K₀ `K₂) (ctx 🄹 ψ)⟩*/
Opt

SaveAs (B `I `J₀ `J₁) "rec"